from aiogram import Dispatcher, types
from bot_create import dp, LANGUAGE, bot, admin_chat
from registration import Registration, Photography, TakePoints, choose_language
from keyboards import main_keyboard, get_data_keyboard
from database import MasterData, AdminData
from aiogram.dispatcher import FSMContext
import pandas as pd


@dp.message_handler(commands='start')
async def start(message: types.Message, state: FSMContext):
    if message.chat.id == admin_chat:
        await bot.send_message(chat_id=admin_chat,
                               text='–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ!\n–ë–æ—Ç–¥–∞–Ω –≥—É—Ä—É—Ö–¥–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à –º—É–º–∫–∏–Ω —ç–º–∞—Å!',
                               reply_markup=types.ReplyKeyboardRemove())
    else:
        try:
            master_id = MasterData.get_master(message.from_user.id)
            if master_id is None:
                await Registration.registration(message)
            else:
                try:
                    await main_keyboard(message, state)
                except KeyError:
                    await Registration.registration(message)
        except TypeError:
            await message.answer('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω')
            await main_keyboard(message, state)


@dp.message_handler(content_types='photo')
async def photo_message(message:types.Message, state:FSMContext):
    data = await state.get_data()
    await message.answer(LANGUAGE[data['lang']]['FromKeyb'])


@dp.message_handler(lambda message: message.text == '–ú–µ–Ω–∏–Ω–≥ –∞–Ω–∫–µ—Ç–∞–ºüë®üèª‚Äçüíº' or message.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞üë®üèª‚Äçüíº')
async def get_info(message: types.Message, state:FSMContext):
    data = await state.get_data()
    master = MasterData.get_master(message.from_user.id)
    text = f'''{LANGUAGE[data['lang']]['Name']} {master[1]}\n{LANGUAGE[data['lang']]['Phone']} {master[2]}\n{LANGUAGE[data['lang']]['Points']} {master[3]}'''
    await message.answer(text)

@dp.message_handler(lambda message: message.text == '–ë–æ—à“õ–∞—Ç–¥–∞–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—àüîÑ' or message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æüîÑ')
async def update_info(message: types.Message):
    await Registration.registration(message)

@dp.message_handler(lambda message: message.text == '–ì–∞–∑ “õ–æ–∑–æ–Ω–Ω–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∫–∞–∑–∏—à' or message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç—ë–ª')
async def send_photo(message: types.Message, state:FSMContext):
    await Photography.send_photo(message, state)

@dp.message_handler(lambda message: message.text == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—û–ª–∏–º–∏' or message.text == '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def get_data(message: types.Message, state:FSMContext):
    data = await state.get_data()
    await message.answer(LANGUAGE[data['lang']]['AdminPanel'], reply_markup=await get_data_keyboard(state))
    
    @dp.message_handler(lambda message: message.text == '–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à' or message.text == '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    async def get_excel(message: types.Message):
        data = AdminData.get_excel()
        columns = ['Name', 'Phone', 'Points']
        array = []
        for i in data:
            arr = []
            for j in i:
                arr.append(j)
            array.append(arr)
        array = pd.DataFrame(array, columns=columns)
        array.to_excel('database/–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä.xlsx', index=False)
        await message.reply_document(open('database/–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä.xlsx', 'rb'))


    @dp.message_handler(lambda message: message.text == '–ë–∞–ª–ª–∞—Ä–Ω–∏ –∞–π–∏—Ä–∏—à' or message.text == '–û—Ç–Ω—è—Ç—å –±–∞–ª–ª—ã')
    async def minusPoint(message: types.Message, state:FSMContext):
        await TakePoints.takePoints_state(message, state)

    @dp.message_handler(lambda message: message.text == '–û—Ä—Ç–≥–∞ “õ–∞–π—Ç–∏—à‚¨ÖÔ∏è' or message.text == '–ù–∞–∑–∞–¥‚¨ÖÔ∏è')
    async def get_back(message: types.Message, state:FSMContext):
        await main_keyboard(message, state)

    

@dp.message_handler(lambda message: message.text == '–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫' or message.text == '–¢–∏–ª–Ω–∏ —ÉÃÅ–∑–≥–∞—Ä—Ç–∏—Ä–∏—à')
async def change_lang(message: types.Message):
    await choose_language(message)

@dp.errors_handler(exception=KeyError)
async def key_error_exception(update: types.Update, error):
    await update.message.answer('–í–≤–µ–¥–∏—Ç–µ /start\n/start —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥')
    return True
    
    






    

        








def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start, commands='start')