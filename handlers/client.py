from aiogram import Dispatcher, types
from bot_create import dp
from registration import Registration, Photography, TakePoints
from keyboards import main_keyboard, get_data_keyboard
from database import MasterData, AdminData
import pandas as pd


@dp.message_handler(commands='start')
async def start(message: types.Message):
    try:
        master_id = MasterData.get_master(message.from_user.id)
        if master_id == None:
            await message.answer('–ê–≤–≤–∞–ª —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à–∏–Ω–≥–∏–∑ –∫–µ—Ä–∞–∫')
            await Registration.registration(message)
        else:
            await message.answer('“ö—É–π–∏–¥–∞–≥–∏–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥?')
            await main_keyboard(message)
    except TypeError:
        await message.answer('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω')
        await main_keyboard(message)

@dp.message_handler(lambda message: message.text == '–ú–µ–Ω–∏–Ω–≥ –∞–Ω–∫–µ—Ç–∞–ºüë®üèª‚Äçüíº')
async def get_info(message: types.Message):
        master = MasterData.get_master(message.from_user.id)
        text = f'''–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ä–∞“õ–∞–º–∏:{master[4]}\n–ò—Å–º: {master[1]}\n–†–∞“õ–∞–º: {master[2]}\n–ë–∞–ª–ª–∞—Ä: {master[3]}'''
        await message.answer(text)

@dp.message_handler(lambda message: message.text == '–ë–æ—à“õ–∞—Ç–¥–∞–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—àüîÑ')
async def update_info(message: types.Message):
    await Registration.registration(message)

@dp.message_handler(lambda message: message.text == '–ì–∞–∑ “õ–æ–∑–æ–Ω–Ω–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∫–∞–∑–∏—à')
async def send_photo(message: types.Message):
    await Photography.send_photo(message)

@dp.message_handler(lambda message: message.text == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—û–ª–∏–º–∏')
async def get_data(message: types.Message):
    await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–∞–Ω–µ–ª–∏:', reply_markup=get_data_keyboard())
    
    @dp.message_handler(lambda message: message.text == '–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à')
    async def get_excel(message: types.Message):
        data = AdminData.get_master_data()
        columns = ['ID', 'Name', 'Number', 'Points', 'Certificate']
        array = []
        for i in data:
            arr = []
            for j in i:
                arr.append(str(j))
            array.append(arr)
        array = pd.DataFrame(array, columns=columns)
        array.to_excel('database/–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä.xlsx', index=False)
        await message.reply_document(open('database/–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä.xlsx', 'rb'))


    @dp.message_handler(lambda message: message.text == '–ë–∞–ª–ª–∞—Ä–Ω–∏ –∞–π–∏—Ä–∏—à')
    async def minusPoint(message: types.Message):
        await TakePoints.takePoints_state(message)

    @dp.message_handler(lambda message: message.text == '–û—Ä—Ç–≥–∞ “õ–∞–π—Ç–∏—à‚¨ÖÔ∏è')
    async def get_back(message: types.Message):
        await main_keyboard(message)

    



        








def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start, commands='start')